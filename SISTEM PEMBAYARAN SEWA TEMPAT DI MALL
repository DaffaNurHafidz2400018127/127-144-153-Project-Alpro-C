#include <iostream>
#include <string>
#include <unordered_map>
#include <vector>
#include <iomanip>
#include <ctime>
#include <fstream>

using namespace std;

//Delicia

class SistemMall{
	private:
		unordered_map<string, string> adminAccounts = {
	
		    {"admin1", "adminpass"},
		    {"admin2", "admin123"}
		};
		
		unordered_map<string, string> userAccounts = {
			
		    {"Budi", "userpass"},
		    {"Sari", "user123"},
		    {"Rudi", "Rudi02"},
		    {"Tina", "Tina03"},
		    {"Doni", "Doni04"},
		};
		
		struct Penyewa {
			
		    string nama;
		    string noHp;
		    string brand;
		    int nomorKios;
		    int lantai;
		    string tanggalMulai;
		    vector<string> bulanDibayar;
		    unordered_map<string, string> historiPembayaran; // bulan -> tanggal bayar (YYYY-MM-DD)
		};
		
		struct Tempat {
			
		    int lantai;
		    int nomorKios;
		    int harga;
		    bool disewa;
		};
		bool comparePenyewa(const Penyewa& a, const Penyewa& b) {
    		return a.nama < b.nama;
		}
		bool sudahDibayar(const Penyewa& penyewa, const string& bulan) {
			
		    for (const auto& b : penyewa.bulanDibayar) {
		        if (b == bulan) return true;
		    }
		    return false;
		}
		bool comparePenyewaByNama(const Penyewa& a, const Penyewa& b) {
  			return a.nama < b.nama;
		}
		
		vector<Penyewa> dataPenyewa;
		Tempat dataTempat[65];
		
		int binarySearchPenyewa(const vector<Penyewa>& penyewaList, const string& namaCari) {
		    int low = 0, high = penyewaList.size() - 1;
		    while (low <= high) {
		        int mid = (low + high) / 2;
		        if (penyewaList[mid].nama == namaCari)
		            return mid;
		        else if (penyewaList[mid].nama < namaCari)
		            low = mid + 1;
		        else
		            high = mid - 1;
		    }
		    return -1;
		}
		
		
		void pause() {
			
		    cout << "Tekan Enter untuk kembali ke menu...";
		    cin.ignore();
		    cin.get();
		}
		
		void inisialisasiTempat() {
			
		    int nomor = 1;
		    for (int i = 0; i < 65; ++i) {
		        int lantai = i / 13 + 1;
		        dataTempat[i] = {lantai, nomor, 1000000 + (i % 13) * 50000, false};
		        nomor++;
		    }
		
		    dataTempat[5].disewa = true;
		    dataTempat[10].disewa = true;
		    dataTempat[22].disewa = true;
		    dataTempat[34].disewa = true;
		    dataTempat[60].disewa = true;
		
		    dataPenyewa.push_back({"Budi", "08123456789", "BudiStore", dataTempat[5].nomorKios, dataTempat[5].lantai, "1 Januari 2025", {"Januari 2025"}, {{"Januari 2025", "2025-01-01"}}});
		    dataPenyewa.push_back({"Sari", "08987654321", "SariFashion", dataTempat[10].nomorKios, dataTempat[10].lantai, "1 Januari 2025", {"Januari 2025"}, {{"Januari 2025", "2025-01-01"}}});
		    dataPenyewa.push_back({"Rudi", "0877888999", "RudiMart", dataTempat[22].nomorKios, dataTempat[22].lantai, "1 Januari 2025", {"Januari 2025"}, {{"Januari 2025", "2025-01-01"}}});
		    dataPenyewa.push_back({"Tina", "08223334444", "TinaBakery", dataTempat[34].nomorKios, dataTempat[34].lantai, "1 Januari 2025", {"Januari 2025"}, {{"Januari 2025", "2025-01-01"}}});
		    dataPenyewa.push_back({"Doni", "0811333555", "DoniElectro", dataTempat[60].nomorKios, dataTempat[60].lantai, "1 Januari 2025", {"Januari 2025"}, {{"Januari 2025", "2025-01-01"}}});
		}
		struct Laporan {
			string pengirim;
			string isi;
			string tanggal;
			string balasan;
			bool sudahDibalas;
		};
		vector<Laporan> daftarLaporan;
	public:
    SistemMall() {
        inisialisasiTempat();
    }

    string login(string& role);
    void simpanStrukPembayaran(const Penyewa& p, const string& bulan, const string& tanggalBayar, int harga, int denda, int total, const string& metode, const string& kode);
    void tampilkanDataTempat();
    void tambahPenyewa();
    void lihatRukoKosong();
    void riwayatPembayaran(const string& username);
    void bayarSewa(const string& username);
    void laporanPembayaranPenyewa();
    void updateDataPenyewa();
    void reminderPembayaran();
    void sewaTempatPengguna(const string& username);
    void hapusPenyewa();
    void menuProfilUser(const string& username);
    void penyewaBelumBayarBulanIni();
    void searchPenyewaByNama();
    void cariPenyewaJatuhTempo(const string& bulanCek);
    void sortingPenyewaSelection();
    void kirimLaporan(const string& username);
	void tinjauLaporanAdmin();
	void lihatBalasanLaporan(const string& username);
	void tampilkanDataPenyewa();
	void binarySearchPenyewaMenu();
};

void pauseAndClear() {
    cout << "Tekan Enter untuk melanjutkan...";
    cin.ignore();
    cin.get();
    system("cls");  // ? Bersihkan layar setelah Enter ditekan
}

void catatLogLogin(const string& username, const string& role) {
	
    ofstream file("log_login.txt", ios::app);
    
    time_t now = time(0);
    tm *ltm = localtime(&now);
    
    char waktu[20];
    snprintf(waktu, sizeof(waktu), "%04d-%02d-%02d %02d:%02d:%02d",
             1900 + ltm->tm_year, 1 + ltm->tm_mon, ltm->tm_mday,
             ltm->tm_hour, ltm->tm_min, ltm->tm_sec);

    file << "[" << waktu << "] " << role << " '" << username << "' berhasil login\n";
    file.close();
}

string SistemMall::login(string& role) {
    string username, password;
    int pill_user;
    while (true) {
        cout << "\n--- Menu Login ---\n";
        cout << "1. Login sebagai Admin\n";
        cout << "2. Login sebagai Pengguna\n";
        cout << "Masukkan nomor pilihan anda: ";
        int pilihan;
        cin >> pilihan;
        pauseAndClear();

        if (pilihan == 1) {
            while (true) {
                cout << "Masukkan username: ";
                cin >> username;
                cout << "Masukkan password: ";
                cin >> password;
                pauseAndClear();

                if (adminAccounts.count(username) && adminAccounts[username] == password) {
                    role = "admin";
                    catatLogLogin(username, role);
                    return username;
                } else {
                    system("cls");
                    cout << "Username atau password admin salah.\n";
                }
            }
        } 
        
        else if (pilihan == 2) {
            cout << "\n1. SIGN IN\n";
            cout << "2. LOGIN\n";
            cout << "Masukkan nomor pilihan anda: ";
            cin >> pill_user;
            system("cls");

            if (pill_user == 1) {
                // BUAT AKUN
                cout << "\n--- Buat Akun Pengguna ---\n";
                cout << "Masukkan username baru: ";
                cin >> username;
                cout << "Masukkan password baru: ";
                cin >> password;

                if (userAccounts.count(username)) {
                    cout << "Username sudah digunakan. Coba lagi.\n";
                } else {
                    userAccounts[username] = password;
                    cout << "Akun berhasil dibuat. Silakan login.\n";
                }
                continue;
            } 
            
            else if (pill_user == 2) {
                // LOGIN
                while (true) {
                    cout << "\n--- Login Pengguna ---\n";
                    cout << "Masukkan username: ";
                    cin >> username;
                    cout << "Masukkan password: ";
                    cin >> password;
                    pauseAndClear();

                    if (userAccounts.count(username) && userAccounts[username] == password) {
                        role = "pengguna";
                        catatLogLogin(username, role);
                        return username;
                    } else {
                        cout << "Username atau password salah. Coba lagi.\n";
                        pauseAndClear();
                    }
                }
            } 
            
            else {
                cout << "Nomor yang diinput tidak valid!\n";
            }

        } 
        
        else {
            cout << "Pilihan tidak valid. Coba lagi.\n";
        }
    }
}


void SistemMall::tampilkanDataTempat() {
	
    cout << "\nDaftar Semua Tempat:\n";
    cout << left << setw(10) << "Lantai" << setw(15) << "Nomor Kios" << setw(15) << "Harga" << "Status" << endl;
    for (const auto& tempat : dataTempat) {
        cout << left << setw(10) << tempat.lantai
             << setw(15) << tempat.nomorKios
             << setw(15) << tempat.harga
             << (tempat.disewa ? "Disewa" : "  -  ") << endl;
    }
}

void SistemMall::lihatRukoKosong() {
	
    cout << "\n--- Daftar Ruko Kosong ---\n";
    for (const auto& t : dataTempat) {
        if (!t.disewa) {
            cout << "Lantai: " << t.lantai << ", Kios: " << t.nomorKios << ", Harga: Rp " << t.harga << endl;
        }
    }
    
    pause();
}

void SistemMall::tambahPenyewa() {
	
    Penyewa penyewa;
    cout << "\n--- Tambah Data Penyewa ---\n";
    cin.ignore();
    cout << "Nama: "; getline(cin, penyewa.nama);
    cout << "No HP:+62 "; getline(cin, penyewa.noHp);
    cout << "Brand: "; getline(cin, penyewa.brand);
    cout << "Tanggal mulai sewa (cth: 1 Juni 2025): "; getline(cin, penyewa.tanggalMulai);

    int lantai;
    cout << "Pilih lantai (1-5): "; cin >> lantai;

    cout << "Nomor kios yang tersedia di lantai " << lantai << ": ";
    for (int i = 0; i < 65; ++i) {
    	
        if (dataTempat[i].lantai == lantai && !dataTempat[i].disewa) {
        	
            cout << dataTempat[i].nomorKios << " ";
        }
    }
    cout << "\nPilih nomor kios: "; cin >> penyewa.nomorKios;

    penyewa.lantai = lantai;

    for (int i = 0; i < 65; ++i) {
    	
        if (dataTempat[i].nomorKios == penyewa.nomorKios && dataTempat[i].lantai == penyewa.lantai) {
            dataTempat[i].disewa = true;
            break;
        }
    }

    dataPenyewa.push_back(penyewa);
    cout << "Data penyewa berhasil ditambahkan!\n";
    
}

void SistemMall::riwayatPembayaran(const string& username) {
	
    cout << "\n--- Riwayat Pembayaran ---\n";
    
    for (const auto& p : dataPenyewa) {
        if (p.nama == username) {
            cout << "Nama       : " << p.nama << endl;
            cout << "Brand      : " << p.brand << endl;
            cout << "Lantai     : " << p.lantai << endl;
            cout << "Kios       : " << p.nomorKios << endl;
            cout << "Tanggal Mulai Sewa: " << p.tanggalMulai << endl;
            cout << "Bulan yang sudah dibayar:\n";
            if (p.bulanDibayar.empty()) cout << "- Belum ada pembayaran\n";
            else for (const auto& b : p.bulanDibayar) cout << "- " << b << endl;
            pause();
            return;
        }
    }
    cout << "Data penyewa tidak ditemukan.\n";
    
    pause();
}

string tanggalHariIni() {
	
    time_t now = time(0);
    tm *ltm = localtime(&now);
    char buf[11];
    snprintf(buf, sizeof(buf), "%04d-%02d-%02d",
        1900 + ltm->tm_year, 1 + ltm->tm_mon, ltm->tm_mday);
    return string(buf);
}

int hitungDenda(const string& tanggalBayar) {
	
    int dendaPerHari = 50000;
    int tahun, bulan, tanggal;
    sscanf(tanggalBayar.c_str(), "%d-%d-%d", &tahun, &bulan, &tanggal);

    int batasTanggal = 10;

    if (tanggal <= batasTanggal) return 0; // bayar tepat waktu

    int hariTerlambat = tanggal - batasTanggal;
    return hariTerlambat * dendaPerHari;
}

string generateKodeTransaksi(const string& nama, const string& bulan) {
	
    time_t now = time(0);
    return nama + "-" + bulan + "-" + to_string(now);
}

void SistemMall::simpanStrukPembayaran(const Penyewa& p, const string& bulan, const string& tanggalBayar, int harga, int denda, int total, const string& metode, const string& kode) {
	
	ofstream file("struk_pembayaran.txt", ios::app);
	file << "========================================\n";
	file << " STRUK PEMBAYARAN SEWA \n";
	file << "========================================\n";
	file << "Nama Penyewa : " << p.nama << endl;
	file << "Brand : " << p.brand << endl;
	file << "Lantai / Kios : " << p.lantai << " / " << p.nomorKios << endl;
	file << "Bulan Dibayar : " << bulan << endl;
	file << "Tanggal Bayar : " << tanggalBayar << endl;
	file << "Metode : " << metode << endl;
	file << "Harga Sewa : Rp " << harga << endl;
	file << "Denda : Rp " << denda << endl;
	file << "Total Dibayar : Rp " << total << endl;
	file << "Kode Transaksi : " << kode << endl;
	file << "========================================\n\n";
	
	file.close();
}

//Daffa
void SistemMall::bayarSewa(const string& username) {
	cout << "\n--- Pembayaran Sewa ---\n";
	
	for (auto& p : dataPenyewa) {
		if (p.nama == username) {
			for (const auto& t : dataTempat) {
				if (t.nomorKios == p.nomorKios && t.lantai == p.lantai) {
				
					cout << "Nama : " << p.nama << endl;
					cout << "Brand : " << p.brand << endl;
					cout << "Lantai : " << p.lantai << endl;
					cout << "Kios : " << p.nomorKios << endl;
					cout << "Harga : Rp " << t.harga << " /bulan\n";
				    cout << "\nHistori Pembayaran:\n";
				    
				    if (p.historiPembayaran.empty()) {
					    cout << "- Belum ada pembayaran sebelumnya.\n";
					        } else {
					            for (auto& hp : p.historiPembayaran) {
					                int denda = hitungDenda(hp.second);
					                cout << "- Bulan: " << hp.first << ", Tanggal bayar: " << hp.second<< ", Denda: Rp " << denda << endl;
					            }
					        }
					string bulan;
				    cout << "\nMasukkan bulan pembayaran (cth: Juni 2025): ";
				    cin.ignore(); 
					getline(cin, bulan);
				
				     if (sudahDibayar(p, bulan)) {
				        cout << "Anda sudah membayar untuk bulan ini.\n";
				        pause();
				        return;
				    }
				
				    cout << "\nPilih metode pembayaran:\n";
				    cout << "1. E-wallet\n";
				    cout << "2. Transfer Bank\n";
				    cout << "Pilihan: ";
				    int metodeInput;
				    cin >> metodeInput;
				
				    string metode = (metodeInput == 1) ? "E-wallet" : "Transfer Bank";
				
				    string tanggalBayar = tanggalHariIni();
				    int denda = hitungDenda(tanggalBayar);
				    int totalBayar = t.harga + denda;
				
				    cout << "\nDetail Pembayaran:\n";
				    cout << "Harga sewa   : Rp " << t.harga << endl;
				    cout << "Denda        : Rp " << denda << endl;
				    cout << "Total bayar  : Rp " << totalBayar << endl;
				
				    string kodeTransaksi = generateKodeTransaksi(p.nama, bulan);
				    cout << "Kode Transaksi: " << kodeTransaksi << endl;
				
				    p.bulanDibayar.push_back(bulan);
				    p.historiPembayaran[bulan] = tanggalBayar;
				
				    simpanStrukPembayaran(p, bulan, tanggalBayar, t.harga, denda, totalBayar, metode, kodeTransaksi);
				
				    cout << "\nPembayaran berhasil. Struk disimpan ke file.\n";
				    pause();
				    return;
	            }
	        }
	    }
	}
	cout << "Data penyewa tidak ditemukan.\n";
	pause();
	
}

void SistemMall::laporanPembayaranPenyewa() {
	
    cout << "\n--- Laporan Pembayaran Semua Penyewa ---\n";
    for (const auto& p : dataPenyewa) {
    	
        cout << "Nama       : " << p.nama << endl;
        cout << "Brand      : " << p.brand << endl;
        cout << "Lantai/Kios: " << p.lantai << " / " << p.nomorKios << endl;
        if (p.bulanDibayar.empty()) {
        	
            cout << "- Belum ada pembayaran\n";
        } else {
        	
            int totalPembayaran = 0;
            for (const auto& bulan : p.bulanDibayar) {
            	
                string tanggalBayar = p.historiPembayaran.at(bulan);
                int denda = hitungDenda(tanggalBayar);
                int hargaSewa = 0;
                for (const auto& t : dataTempat) {
                	
                    if (t.nomorKios == p.nomorKios && t.lantai == p.lantai) {
                    	
                        hargaSewa = t.harga;
                        break;
                    }
                }
                int total = hargaSewa + denda;
                totalPembayaran += total;
                cout << "- Bulan: " << bulan << ", Tanggal bayar: " << tanggalBayar
                     << ", Harga: Rp " << hargaSewa
                     << ", Denda: Rp " << denda
                     << ", Total: Rp " << total << endl;
            }
            cout << "Total Pembayaran Keseluruhan: Rp " << totalPembayaran << endl;
        }
        cout << "----------------------------------------\n";
    }
    pause();
}

//Linear search update data penyewa [DELICIA RISA HIBATULLAH 144 C]
void SistemMall::updateDataPenyewa() {
    cout << "\n--- Update Data Penyewa ---\n";
    cin.ignore();
    cout << "Masukkan nama penyewa yang ingin diupdate: ";
    string namaCari;
    getline(cin, namaCari);

    bool ditemukan = false;

    for (int i = 0; i < dataPenyewa.size(); ++i) {
        if (dataPenyewa[i].nama == namaCari) {
            ditemukan = true;

            Penyewa& p = dataPenyewa[i];
            cout << "Data ditemukan. Isi data baru (kosongkan jika tidak ingin diubah):\n";

            cout << "Nama (" << p.nama << "): ";
            string input;
            getline(cin, input);
            if (!input.empty()) p.nama = input;

            cout << "No HP (+62 " << p.noHp << "): +62 ";
            getline(cin, input);
            if (!input.empty()) p.noHp = input;

            cout << "Brand (" << p.brand << "): ";
            getline(cin, input);
            if (!input.empty()) p.brand = input;

            cout << "Lantai (" << p.lantai << "): ";
            getline(cin, input);
            if (!input.empty()) {
                int lantaiBaru = stoi(input);

                // Kosongkan kios lama
                for (int j = 0; j < 65; ++j) {
                    if (dataTempat[j].nomorKios == p.nomorKios && dataTempat[j].lantai == p.lantai) {
                        dataTempat[j].disewa = false;
                        break;
                    }
                }

                cout << "Nomor kios yang tersedia di lantai " << lantaiBaru << ": ";
                for (int j = 0; j < 65; ++j) {
                    if (dataTempat[j].lantai == lantaiBaru && !dataTempat[j].disewa) {
                        cout << dataTempat[j].nomorKios << " ";
                    }
                }

                cout << "\nPilih nomor kios baru: ";
                string kiosInput;
                getline(cin, kiosInput);
                int kiosBaru = stoi(kiosInput);

                for (int j = 0; j < 65; ++j) {
                    if (dataTempat[j].nomorKios == kiosBaru && dataTempat[j].lantai == lantaiBaru) {
                        dataTempat[j].disewa = true;
                        break;
                    }
                }

                p.lantai = lantaiBaru;
                p.nomorKios = kiosBaru;
            }

            cout << "Data penyewa berhasil diupdate.\n";
            break;
        }
    }

    if (!ditemukan) {
        cout << "Data penyewa tidak ditemukan.\n";
    }

    pause();
}



void SistemMall::reminderPembayaran() {
    while (true) {
        cin.ignore();
        cout << "\n--- Reminder Pembayaran ---\n";
        cout << "Masukkan bulan yang ingin dicek (cth: Juni 2025): ";
        string bulanCek;
        getline(cin, bulanCek);

        vector<Penyewa> belumBayar;

        for (const auto& p : dataPenyewa) {
            if (!sudahDibayar(p, bulanCek)) {
                belumBayar.push_back(p);
            }
        }

        // Sorting nama penyewa (bubble sort)
        for (int i = 0; i < belumBayar.size() - 1; ++i) {
            for (int j = 0; j < belumBayar.size() - i - 1; ++j) {
                if (belumBayar[j].nama > belumBayar[j + 1].nama) {
                    swap(belumBayar[j], belumBayar[j + 1]);
                }
            }
        }

        cout << "\nPenyewa yang belum membayar bulan " << bulanCek << ":\n";
        if (belumBayar.empty()) {
            cout << "Semua penyewa sudah membayar bulan ini.\n";
        } else {
            for (const auto& p : belumBayar) {
                cout << "- " << p.nama << ", Brand: " << p.brand
                     << ", Lantai: " << p.lantai
                     << ", Kios: " << p.nomorKios << endl;
            }
        }

        cout << "\nKetik 0 untuk kembali ke menu, atau tekan Enter untuk cek bulan lain: ";
        string pilihan;
        getline(cin, pilihan);

        if (pilihan == "0") {
            break; // keluar dari while dan balik ke menu utama
        }

        // lanjut cek bulan lain (loop ulang)
    }
}


void SistemMall::sewaTempatPengguna(const string& username) {
	
    cout << "\n--- Sewa Tempat ---\n";
    cout << "Pilih lantai (1-5): ";
    int lantaiPilih;
    cin >> lantaiPilih;

    cout << "Kios kosong di lantai " << lantaiPilih << ":\n";
    vector<int> kiosTersedia;
    for (const auto& tempat : dataTempat) {
        if (tempat.lantai == lantaiPilih && !tempat.disewa) {
            cout << "- Kios nomor " << tempat.nomorKios << " (Harga: Rp " << tempat.harga << ")\n";
            kiosTersedia.push_back(tempat.nomorKios);
        }
    }

    if (kiosTersedia.empty()) {
        cout << "Maaf, tidak ada kios kosong di lantai ini.\n";
        pause();
        return;
    }

    cout << "Pilih nomor kios yang ingin disewa: ";
    int kiosPilih;
    cin >> kiosPilih;
    cin.ignore();
    bool validKios = false;
    
    for (int k : kiosTersedia) {
    	
        if (k == kiosPilih) {
        	
            validKios = true;
            break;
        }
    }

    if (!validKios) {
    	
        cout << "Nomor kios tidak valid atau sudah disewa.\n";
        pause();
        return;
    }

    cin.ignore();
    
    cout << "Masukkan nama brand Anda: ";
    string brandInput;
    getline(cin, brandInput);

    cout << "Masukkan tanggal mulai sewa (cth: 1 Juni 2025): ";
    string tanggalMulaiInput;
    getline(cin, tanggalMulaiInput);

    // Update status kios jadi disewa
    for (auto& tempat : dataTempat) {
        if (tempat.nomorKios == kiosPilih && tempat.lantai == lantaiPilih) {
            tempat.disewa = true;
            break;
        }
    }

    // Tambah data penyewa baru
    Penyewa penyewaBaru;
    penyewaBaru.nama = username;
    penyewaBaru.noHp = "-"; 
    penyewaBaru.brand = brandInput;
    penyewaBaru.nomorKios = kiosPilih;
    penyewaBaru.lantai = lantaiPilih;
    penyewaBaru.tanggalMulai = tanggalMulaiInput;

    dataPenyewa.push_back(penyewaBaru);

    cout << "Selamat! Anda berhasil menyewa kios nomor " << kiosPilih << " di lantai " << lantaiPilih << ".\n";
}
//Helmi

void SistemMall::kirimLaporan(const string& username) {
	
    Laporan laporan;
    laporan.pengirim = username;
    cout << "\n--- Kirim Laporan / Komplain ---\n";
    cout << "Tulis isi laporan/pertanyaan Anda:\n> ";
    getline(cin, laporan.isi);
    
    laporan.tanggal = tanggalHariIni();
    laporan.balasan = "-";
    laporan.sudahDibalas = false;

    daftarLaporan.push_back(laporan);
    cout << "Laporan berhasil dikirim ke admin.\n";
    pause();
}

void SistemMall::tinjauLaporanAdmin() {
	
    cout << "\n--- Daftar Laporan Masuk ---\n";
    if (daftarLaporan.empty()) {
    	
        cout << "Belum ada laporan dari pengguna.\n";
        pause();
        return;
    }

    for (size_t i = 0; i < daftarLaporan.size(); ++i) {
    	
        const auto& l = daftarLaporan[i];
        cout << "\n[" << i + 1 << "] Dari: " << l.pengirim << " | Tanggal: " << l.tanggal << endl;
        cout << "Isi     : " << l.isi << endl;
        cout << "Status  : " << (l.sudahDibalas ? "Sudah dibalas" : "Belum dibalas") << endl;
        if (l.sudahDibalas) {
            cout << "Balasan : " << l.balasan << endl;
        }
    }

    cout << "\nMasukkan nomor laporan yang ingin dibalas (0 untuk kembali): ";
    int pilih;
    cin >> pilih;

    if (pilih < 1 || pilih > (int)daftarLaporan.size()) {
    	
        cout << "Kembali ke menu admin.\n";
        pause();
        return;
    }

    Laporan& laporanDipilih = daftarLaporan[pilih - 1];
    if (laporanDipilih.sudahDibalas) {
    	
        cout << "Laporan ini sudah dibalas.\n";
        pause();
        return;
    }

    cin.ignore();
    cout << "Tulis balasan Anda:\n> ";
    getline(cin, laporanDipilih.balasan);
    laporanDipilih.sudahDibalas = true;
    cout << "Balasan telah dikirim ke pengguna.\n";
    pause();
}

void SistemMall::lihatBalasanLaporan(const string& username) {
	
    cout << "\n--- Balasan Laporan Anda ---\n";
    bool ada = false;
    for (const auto& l : daftarLaporan) {
        if (l.pengirim == username) {
            ada = true;
            cout << "\nTanggal: " << l.tanggal << "\nIsi: " << l.isi << endl;
            cout << "Balasan: " << (l.sudahDibalas ? l.balasan : "(Belum dibalas)") << endl;
        }
    }
    if (!ada) cout << "Belum ada laporan yang dikirim.\n";
    pause();
}

void SistemMall::sortingPenyewaSelection() {
	
    cout << "\n--- Sorting Data Penyewa (Selection Sort Berdasarkan Nama) ---\n";
    vector<Penyewa> penyewaSort = dataPenyewa;
    int n = penyewaSort.size();
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (penyewaSort[j].nama < penyewaSort[minIndex].nama) {
                minIndex = j;
            }
        }
        if (minIndex != i) {
            swap(penyewaSort[i], penyewaSort[minIndex]);
        }
    }

    cout << "\nHasil Sorting:\n";
    for (const auto& p : penyewaSort) {
        cout << "Nama     : " << p.nama << endl;
        cout << "Brand    : " << p.brand << endl;
        cout << "No HP    : " << p.noHp << endl;
        cout << "Lantai   : " << p.lantai << endl;
        cout << "Kios     : " << p.nomorKios << endl;
        cout << "Tanggal Mulai: " << p.tanggalMulai << endl;
        cout << "----------------------------------\n";
    }

    cout << "\nMasukkan nomor kios untuk mencari data penyewa: ";
    int nomorCari;
    cin >> nomorCari;
    bool ditemukan = false;
    for (const auto& p : penyewaSort) {
        if (p.nomorKios == nomorCari) {
            cout << "\nData penyewa ditemukan:\n";
            cout << "Nama     : " << p.nama << endl;
            cout << "Brand    : " << p.brand << endl;
            cout << "No HP    : " << p.noHp << endl;
            cout << "Lantai   : " << p.lantai << endl;
            cout << "Kios     : " << p.nomorKios << endl;
            cout << "Tanggal Mulai: " << p.tanggalMulai << endl;
            cout << "----------------------------------\n";
            ditemukan = true;
            break;
        }
    }
    if (!ditemukan) {
        cout << "\nPenyewa dengan nomor kios tersebut tidak ditemukan.\n";
    }
    pause();
}


string namaBulanTahunSekarang() {
	
    time_t now = time(0);
    tm* ltm = localtime(&now);
    string namaBulan[] = {"Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"};
    string bulan = namaBulan[ltm->tm_mon];
    int tahun = 1900 + ltm->tm_year;
    return bulan + " " + to_string(tahun);
    
}

void SistemMall::penyewaBelumBayarBulanIni() {
	
    string bulanIni = namaBulanTahunSekarang();
    cout << "\n--- Penyewa yang Belum Membayar Bulan " << bulanIni << " ---\n";

    bool ada = false;
    for (const auto& p : dataPenyewa) {
        if (!sudahDibayar(p, bulanIni)) {
            cout << "Nama     : " << p.nama << endl;
            cout << "Brand    : " << p.brand << endl;
            cout << "Lantai   : " << p.lantai << ", Kios: " << p.nomorKios << endl;
            cout << "Tanggal Mulai Sewa: " << p.tanggalMulai << endl;
            cout << "--------------------------------------\n";
            ada = true;
            
        }
    }

    if (!ada) {
        cout << "Semua penyewa sudah membayar bulan ini.\n";
    }

    pause();
}
void SistemMall::tampilkanDataPenyewa() {
    for (const auto& p : dataPenyewa) {
        cout << "Nama : " << p.nama << ", Brand: " << p.brand << ", No HP: " << p.noHp << ", Kios: " << p.nomorKios << ", Lantai: " << p.lantai << endl;
    }
}

//linear search hapus penyewa [M HELMI MUSTOFA 153 C]
void SistemMall::hapusPenyewa() {
    cout << "\n--- Hapus Data Penyewa ---\n";
    cin.ignore();
    cout << "Masukkan nama penyewa yang ingin dihapus: ";
    string namaHapus;
    getline(cin, namaHapus);

    bool ditemukan = false;
    for (int i = 0; i < dataPenyewa.size(); ++i) {
        if (dataPenyewa[i].nama == namaHapus) {
            for (int j = 0; j < 65; ++j) {
                if (dataTempat[j].nomorKios == dataPenyewa[i].nomorKios &&
                    dataTempat[j].lantai == dataPenyewa[i].lantai) {
                    dataTempat[j].disewa = false;
                    break;
                }
            }

            dataPenyewa.erase(dataPenyewa.begin() + i);
            cout << "Data penyewa berhasil dihapus.\n";

            cout << "\n--- Data Penyewa Terkini ---\n";
            tampilkanDataPenyewa();
            ditemukan = true;
            break;
        }
    }

    if (!ditemukan) {
        cout << "Data penyewa tidak ditemukan.\n";
    }

    pause();
}

void SistemMall::menuProfilUser(const string& username) {
	
    while (true) {
    	
        cout << "\n--- Menu Profil Anda ---\n";
        cout << "1. Lihat Profil\n";
        cout << "2. Edit No HP\n";
        cout << "3. Edit Brand\n";
        cout << "0. Kembali ke menu utama\n";
        cout << "Pilihan: ";
        int pilih;
        cin >> pilih;
        cin.ignore();

        for (auto& p : dataPenyewa) {
        	
            if (p.nama == username) {
            	
                if (pilih == 1) {
                	
                    cout << "\nNama  : " << p.nama << endl;
                    cout << "No HP : " << p.noHp << endl;
                    cout << "Brand : " << p.brand << endl;
                    cout << "Kios  : " << p.nomorKios << ", Lantai: " << p.lantai << endl;
                    cout << "Tanggal Mulai: " << p.tanggalMulai << endl;
                    pause();
                } else if (pilih == 2) {
                	
                    cout << "No HP saat ini: " << p.noHp << "\n";
                    cout << "Masukkan No HP baru: ";
                    string noHpBaru;
                    getline(cin, noHpBaru);
                    if (!noHpBaru.empty()) p.noHp = noHpBaru;
                    cout << "No HP berhasil diperbarui.\n";
                    pause();
                } else if (pilih == 3) {
                	
                    cout << "Brand saat ini: " << p.brand << "\n";
                    cout << "Masukkan nama Brand baru: ";
                    string brandBaru;
                    getline(cin, brandBaru);
                    if (!brandBaru.empty()) p.brand = brandBaru;
                    cout << "Brand berhasil diperbarui.\n";
                    pause();
                } else if (pilih == 0) {
                	
                    return;
                } else {
                	
                    cout << "Pilihan tidak valid.\n";
                }
                break;
            }
        }
    }
}

void SistemMall::searchPenyewaByNama() {
    cout << "\n--- Cari Data Penyewa Berdasarkan Nama ---\n";
    cin.ignore();
    cout << "Masukkan nama penyewa yang ingin dicari: ";
    string namaCari;
    getline(cin, namaCari);

    bool ditemukan = false;
    for (int i = 0; i < dataPenyewa.size(); ++i) {
        if (dataPenyewa[i].nama == namaCari) {
            Penyewa& p = dataPenyewa[i];
            cout << "\nData penyewa ditemukan:\n";
            cout << "Nama\t\t: " << p.nama << endl;
            cout << "No HP\t\t: " << p.noHp << endl;
            cout << "Brand\t\t: " << p.brand << endl;
            cout << "Lantai\t\t: " << p.lantai << endl;
			cout << "Kios\t\t: " << p.nomorKios << endl;
            cout << "Tanggal Mulai\t: " << p.tanggalMulai << endl;
            ditemukan = true;
            break;
        }
    }

    if (!ditemukan) {
        cout << "Data penyewa tidak ditemukan.\n";
    }

    pause();
}

// Binary Search by Nama Penyewa untuk cari yang belum bayar bulan ini [DAFFA NUR HAFIDZ 127 C]
void SistemMall::cariPenyewaJatuhTempo(const string& bulanCek) {
    vector<Penyewa> penyewaBelumBayar;

    for (int i = 0; i < dataPenyewa.size(); ++i) {
        if (!sudahDibayar(dataPenyewa[i], bulanCek)) {
            penyewaBelumBayar.push_back(dataPenyewa[i]);
        }
    }

    // Urutkan nama pakai bubble sort (biar compatible dengan Dev-C++)
    for (int i = 0; i < penyewaBelumBayar.size() - 1; ++i) {
        for (int j = 0; j < penyewaBelumBayar.size() - i - 1; ++j) {
            if (penyewaBelumBayar[j].nama > penyewaBelumBayar[j + 1].nama) {
                Penyewa temp = penyewaBelumBayar[j];
                penyewaBelumBayar[j] = penyewaBelumBayar[j + 1];
                penyewaBelumBayar[j + 1] = temp;
            }
        }
    }

    cout << "\n--- Daftar Penyewa yang Belum Bayar Bulan " << bulanCek << " ---\n";

    if (penyewaBelumBayar.empty()) {
        cout << "Semua penyewa sudah membayar bulan ini.\n";
    } else {
        for (int i = 0; i < penyewaBelumBayar.size(); ++i) {
            cout << "Nama     : " << penyewaBelumBayar[i].nama << endl;
            cout << "Brand    : " << penyewaBelumBayar[i].brand << endl;
            cout << "Lantai   : " << penyewaBelumBayar[i].lantai << ", Kios: " << penyewaBelumBayar[i].nomorKios << endl;
            cout << "Tanggal Mulai Sewa: " << penyewaBelumBayar[i].tanggalMulai << endl;
            cout << "----------------------------------------\n";
        }
    }

    pause();
}

// Fungsi utama Binary Search Menu
void SistemMall::binarySearchPenyewaMenu() {
    // Salin data penyewa ke vektor baru
    vector<Penyewa> sorted = dataPenyewa;

    // Urutkan manual pakai bubble sort
    for (int i = 0; i < sorted.size() - 1; ++i) {
        for (int j = 0; j < sorted.size() - i - 1; ++j) {
            if (sorted[j].nama > sorted[j + 1].nama) {
                Penyewa temp = sorted[j];
                sorted[j] = sorted[j + 1];
                sorted[j + 1] = temp;
            }
        }
    }

    cin.ignore();
    cout << "\n--- Cari Penyewa (Binary Search) ---\n";
    cout << "Masukkan nama penyewa: ";
    string nama;
    getline(cin, nama);

    // Binary search
    int low = 0, high = sorted.size() - 1, index = -1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (sorted[mid].nama == nama) {
            index = mid;
            break;
        } else if (sorted[mid].nama < nama) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    // Tampilkan hasil
    if (index != -1) {
        Penyewa p = sorted[index];
        cout << "\nData penyewa ditemukan:\n";
        cout << "Nama     : " << p.nama << endl;
        cout << "No HP    : " << p.noHp << endl;
        cout << "Brand    : " << p.brand << endl;
        cout << "Lantai   : " << p.lantai << ", Kios: " << p.nomorKios << endl;
        cout << "Tanggal Mulai: " << p.tanggalMulai << endl;
    } else {
        cout << "\nData penyewa tidak ditemukan.\n";
    }

    pause();
}


int main() {
	
    SistemMall app;
    string role, username;
    username = app.login(role);
    int pilihan;
    
    do {
        cout << "\n--- Sistem Pembayaran Sewa Tempat ---\n";
        cout << "1. Lihat Daftar Tempat\n";
        
        if (role == "admin") {
        	
            cout << "2.  Tambah Penyewa\n";
            cout << "3.  Lihat Ruko Kosong\n";
            cout << "4.  Laporan Pembayaran Penyewa\n";
            cout << "5.  Update Data Penyewa\n";
            cout << "6.  Reminder Pembayaran\n";
            cout << "7.  Tinjau Laporan Pengguna\n";
            cout << "8.  Cari Data Penyewa\n";
            cout << "9.  Lihat Penyewa Belum Bayar Bulan Ini\n";
            cout << "10. Hapus data penyewa\n";
            cout << "11. Search Penyewa\n";
            cout << "12. Cari penyewa belum bayar bulan ini\n";
            cout << "13. Mencari Data Penyewa\n";
            cout << "14. Logout\n";
        	cout << "0. Keluar\n";
            
        } else {
        	
            cout << "2. Bayar Sewa\n";
            cout << "3. Lihat Riwayat Pembayaran\n";
            cout << "4. Sewa Tempat\n";
            cout << "5. Kirim Laporan \n";
			cout << "6. Lihat Balasan Laporan\n";
			cout << "7. profil\n";
			cout << "8. Logout\n";
            cout << "0. Keluar\n";
            
        }
        cout << "Pilihan: ";
        cin >> pilihan;
        cin.ignore();
        system("cls");

        if (role == "admin") {
        	
            switch (pilihan) {
            	
                case 1: 
					app.tampilkanDataTempat(); 
					pauseAndClear();
					break;
				
                case 2: 
					app.tambahPenyewa(); 
					cin.ignore();
					pauseAndClear();
					break;
				
                case 3: 
					app.lihatRukoKosong();
					cin.ignore();
					pauseAndClear(); 
					break;
				
                case 4: 
					app.laporanPembayaranPenyewa();
					cin.ignore();
					pauseAndClear(); 
					break;
				
                case 5: 
					app.updateDataPenyewa();
					cin.ignore();
					pauseAndClear(); 
					break;
				
                case 6: 
					app.reminderPembayaran();
					cin.ignore();
					pauseAndClear(); 
					break;
				
				case 7: 
					app.tinjauLaporanAdmin();
					cin.ignore();
					pauseAndClear(); 
					break;
				
				case 8: 
					app.sortingPenyewaSelection();
					cin.ignore();
					pauseAndClear(); 
					break;
				
				case 9: 
					app.penyewaBelumBayarBulanIni();
					cin.ignore();
					pauseAndClear(); 
					break;
				
				case 10:
					app.hapusPenyewa();
					cin.ignore();
					pauseAndClear();
					break;
					
				case 11:
					app.searchPenyewaByNama();
					cin.ignore();
					pauseAndClear();
					break;
				
				case 12:
			       	{
					    string bulan;
					    cout << "Masukkan bulan yang ingin dicek (cth: Juni 2025): ";
					    getline(cin, bulan);
					    app.cariPenyewaJatuhTempo(bulan);
					}
					cin.ignore();
					pauseAndClear();
					break;
					
				case 13:
					app.binarySearchPenyewaMenu();
				    pauseAndClear();
				    break;
					
				case 14:
					cout<<"logout berhasil!\n";
					pauseAndClear();
					cin.ignore();
					username = app.login(role);
					cin.ignore();
					pauseAndClear();
					break;	
				    
                case 0: 
					cout << "Terima kasih!\n"; 
					break;
				
                default: 
					cout << "Pilihan tidak valid.\n";
					cin.ignore();
					pauseAndClear();
            }
        } else {
            switch (pilihan) {
            	
                case 1: 
					app.tampilkanDataTempat();
					cin.ignore();
					pauseAndClear(); 
					break;
				
                case 2: 
					app.bayarSewa(username);
					cin.ignore();
					pauseAndClear(); 
					break;
				
                case 3: 
					app.riwayatPembayaran(username);
					cin.ignore();
					pauseAndClear(); 
					break;
				
				case 4: 
					app.sewaTempatPengguna(username);
					cin.ignore();
					pauseAndClear(); 
					break;
				
				case 5: 
					app.kirimLaporan(username);
					cin.ignore();
					pauseAndClear(); 
					break;
				
				case 6: 
					app.lihatBalasanLaporan(username);
					cin.ignore();
					pauseAndClear(); 
					break;
				
				case 7:
					app.menuProfilUser(username);
					cin.ignore();
					pauseAndClear();
					break;
					
				case 8:
					cout<<"logout berhasil!\n";
					pauseAndClear();
					cin.ignore();
					username = app.login(role);
					cin.ignore();
					pauseAndClear();
					break;
					
                case 0: 
					cout << "Terima kasih!\n"; 
					break;
				
                default: 
					cout << "Pilihan tidak valid.\n";
					cin.ignore();
					pauseAndClear();
				
            }
        }
    } 
	while (pilihan != 0);

    return 0;
}
